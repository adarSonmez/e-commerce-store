import { createSlice, createEntityAdapter } from '@reduxjs/toolkit';

/* The methods generated by createEntityAdapter will all manipulate an 
"entity state" structure that looks like this: { ids: [], entities: {}} */
const cartItemAdapter = createEntityAdapter({
  sortComparer: (a, b) => a.id - b.id,
});

const initialState = cartItemAdapter.getInitialState({
  hidden: true,
  // cartItems: [],
});

export const cartSlice = createSlice({
  name: 'cart',
  initialState,
  reducers: {
    toggleHidden: (state) => {
      state.hidden = !state.hidden;
    },
    addItem: (state, action) => {
      const existingCartItem = state.entities[action.payload.id];

      if (existingCartItem) {
        existingCartItem.quantity += 1;
      } else {
        cartItemAdapter.addOne(state, {...action.payload, quantity: 1});
      }
    },
    reduceItem: (state, action) => {
      const existingCartItem = state.entities[action.payload.id];

      if (existingCartItem.quantity === 1) {
        cartItemAdapter.removeOne(state, action.payload.id);
      } else {
        existingCartItem.quantity -= 1;
      }
    },
    clearItem: (state, action) => {
      cartItemAdapter.removeOne(state, action.payload.id);
    },
  },
});

export const { toggleHidden, addItem, reduceItem, clearItem } =
  cartSlice.actions;

export default cartSlice.reducer;
