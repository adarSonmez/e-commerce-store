import {
  createSlice,
  createEntityAdapter,
  EntityState,
  PayloadAction,
} from '@reduxjs/toolkit'

import { ShopItem as CartItem } from '../shop/shop.slice'

export interface CartState extends CartItem {
  hidden: boolean
  ids: number[]
  entities: EntityState<CartItem>
}

/* The methods generated by createEntityAdapter will all manipulate an 
"entity state" structure that looks like this: { ids: [], entities: {}} */
const cartItemAdapter = createEntityAdapter<CartItem>({
  sortComparer: (a, b) => a.id - b.id,
})

const initialState = cartItemAdapter.getInitialState({
  hidden: true,
})

export const cartSlice = createSlice({
  name: 'cart',
  initialState,
  reducers: {
    toggleHidden: (state) => {
      state.hidden = !state.hidden
    },
    addItem: (state, action: PayloadAction<CartItem>) => {
      const existingCartItem = state.entities[action.payload.id]

      if (existingCartItem) {
        existingCartItem.quantity += 1
      } else {
        cartItemAdapter.addOne(state, { ...action.payload, quantity: 1 })
      }
    },
    reduceItem: (state, action: PayloadAction<CartItem>) => {
      const existingCartItem = state.entities[action.payload.id]

      if (existingCartItem?.quantity === 1) {
        cartItemAdapter.removeOne(state, action.payload.id)
      } else {
        if (existingCartItem) {
          existingCartItem.quantity -= 1
        }
      }
    },
    clearItem: (state, action: PayloadAction<CartItem>) => {
      cartItemAdapter.removeOne(state, action.payload.id)
    },
  },
})

export const { toggleHidden, addItem, reduceItem, clearItem } =
  cartSlice.actions

export default cartSlice.reducer
